#include "imports/stdlib.fc";
#include "imports/nft-utils.fc";

(slice, int, cell, cell) load_data() inline {
    var ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(), ;; owner_address
        ds~load_uint(64), ;; next_item_index
        ds~load_ref(), ;; content
        ds~load_ref() ;; nft_item_code
    );
}

() save_data(slice owner_address, int next_item_index, cell content, cell nft_item_code) impure inline {
    set_data(begin_cell().store_slice(owner_address).store_uint(next_item_index, 64).store_ref(content).store_ref(nft_item_code).end_cell());
}

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    var (owner_address, next_item_index, content, nft_item_code) = load_data();

    throw_unless(401, equal_slices_bits(sender_address, owner_address));

    ;; deploy NFT
    if (op == 1) { 
        int item_index = in_msg_body~load_uint(64);
        throw_unless(402, item_index <= next_item_index);
        var is_last = item_index == next_item_index;
        deploy_nft_item(item_index, nft_item_code, in_msg_body~load_coins(), in_msg_body~load_ref());

        if(is_last) {
            next_item_index += 1;
            save_data(owner_address, next_item_index, content, nft_item_code);
        }
        return ();
    }

    ;; deploy collection of NFT
    if (op == 2) {
        int counter = 0;
        cell deploy_list = in_msg_body~load_ref();
        do {
            var (item_index, item, f?) = deploy_list~udict::delete_get_min(64);
            if (f?) {
                counter += 1;
                if (counter >= 250) { ;; Limit NFT
                    throw(399);
                }

                throw_unless(403 + counter, item_index <= next_item_index);
                deploy_nft_item(item_index, nft_item_code, item~load_coins(), item~load_ref());
            }
        } until ( ~ f?);
        save_data(owner_address, next_item_index, content, nft_item_code);
        return ();
    }
    ;; Change owner of collection.
    if (op == 3) {
        slice new_owner = in_msg_body~load_msg_addr();
        save_data(new_owner, next_item_index, content, nft_item_code);
        return ();
    }
    throw(0xffff);
}

;; Getters
(int, cell, slice) get_collection_data() method_id {
    var (owner_address, next_item_index, content, _) = load_data();
    slice cs = content.begin_parse();
    return (next_item_index, cs~load_ref(), owner_address);
}

slice get_nft_address_by_index(int item_index) method_id {
    var (_, _, _, nft_item_code) = load_data();
    cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
    return calculate_nft_item_address(0, state_init);
}

cell get_nft_content(int index, cell item_nft_content) method_id {
    var (_, _, content, _) = load_data();
    slice cs = content.begin_parse();
    cs~load_ref();
    slice common_content = cs~load_ref().begin_parse();
    return (begin_cell()
                .store_uint(1, 8) ;; offchain
                .store_slice(common_content)
                .store_ref(item_nft_content)
            .end_cell());
}